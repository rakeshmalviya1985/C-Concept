/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <bits/stdc++.h>
using namespace std;


template <typename T>
class share_ptr
{
    private:
    
    T* ptr;
	atomic <int> refCount;
    public:
    
    share_ptr()
    {
        cout<<"\n constructor default ";
        ptr = nullptr;
		refCount = 0;
    }
    
    T getValue()
    {
        return *ptr;
    }
	
	int shareCount()
	{
	    return refCount;
	}
   explicit share_ptr(T* ptr1)
    {
        cout<<"\n  constructor pointer";
        refCount= 0;
		++refCount;
        ptr = ptr1;
    }
    share_ptr& operator=(share_ptr &ptr3)
    {
        if(this == &ptr3)
        return *this;
        this->~share_ptr();
		refCount = ptr3.shareCount();
        ptr = ptr3.ptr;
        ++refCount;
        cout<<"\n Assignment operator111  : "<<refCount;
        
        return *this;
    }
    
    T* operator->()
    {
        cout<<"\n  -> operator oveload";
        return ptr;
    }
    
    T& operator*()
    {
        cout<<"\n  * operator oveload";
        return *ptr;
    }
    
    
    ~share_ptr()
    {
        cout<<"\n  destructor "<<refCount;
        if(ptr)
        {
	          --refCount;
             if(refCount <= 0)
             {
                delete ptr;
                refCount = 0;
                ptr = nullptr;
             }
        }
    }
    
};

int main()
{
    share_ptr<string> sp(new string());
      cout<<"\n sp : "<<*sp<<" "<<sp.shareCount();
    share_ptr<string> sp1;
    return 0;
}
